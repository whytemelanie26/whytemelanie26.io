(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
var Vector_1 = require("./math/Vector");
var GSTransform = (function () {
    function GSTransform(obj) {
        if (obj === void 0) { obj = {}; }
        this.perspective = 0;
        this.rotation = 0;
        this.rotationX = 0;
        this.rotationY = 0;
        this.scaleX = 1;
        this.scaleY = 1;
        this.scaleZ = 1;
        this.skewX = 0;
        this.svg = 0;
        this.x = 0;
        this.xOffset = 0;
        this.xOrigin = 0;
        this.y = 0;
        this.yOffset = 0;
        this.yOrigin = 0;
        this.z = 0;
        this.zOrigin = 0;
        for (var prop in obj) {
            this[prop] = obj[prop];
        }
    }
    GSTransform.diff = function (a, b) {
        var trans = new GSTransform();
        for (var prop in trans) {
            trans[prop] = a[prop] - b[prop];
        }
        return trans;
    };
    return GSTransform;
}());
exports.GSTransform = GSTransform;
TweenMax.ticker["deltaTime"] = 1 / 60;
TweenMax.ticker["timePer"] = 1;
var prevTime = TweenMax.ticker["time"];
TweenMax.ticker.addEventListener("tick", function () {
    var time = TweenMax.ticker["time"];
    var deltaTime = time - prevTime;
    prevTime = time;
    TweenMax.ticker["deltaTime"] = deltaTime;
    TweenMax.ticker["timePer"] = deltaTime / (1 / 60);
});
var BaseElement = (function () {
    function BaseElement(elOrType, initSet) {
        if (elOrType === void 0) { elOrType = "div"; }
        if (initSet === void 0) { initSet = {}; }
        this.isTicking = false;
        if (elOrType instanceof HTMLElement) {
            this.el = elOrType;
        }
        else {
            if (!elOrType)
                elOrType = "div";
            this.el = document.createElement(elOrType);
        }
        this.gsSet(initSet);
    }
    BaseElement.prototype.setStyle = function (style) {
        this.el.setAttribute("style", style);
    };
    BaseElement.prototype.setAbs = function (left, top) {
        if (left === void 0) { left = 0; }
        if (top === void 0) { top = 0; }
        BaseElement.setAbs(this.el, left, top);
    };
    BaseElement.prototype.gsSet = function (obj) {
        TweenMax.set(this.el, obj);
    };
    BaseElement.prototype.getPagePos = function () {
        return BaseElement.getPagePos(this.el);
    };
    BaseElement.prototype.getPageCenter = function () {
        return BaseElement.getPageCenter(this.el);
    };
    BaseElement.prototype.getGSTransform = function () {
        return BaseElement.getGSTransform(this.el);
    };
    BaseElement.prototype.append = function (belOrElOrType, initSet) {
        if (belOrElOrType === void 0) { belOrElOrType = "div"; }
        if (initSet === void 0) { initSet = {}; }
        var bel;
        if (belOrElOrType instanceof BaseElement) {
            bel = belOrElOrType;
        }
        else {
            bel = new BaseElement(belOrElOrType, initSet);
        }
        this.el.appendChild(bel.el);
        return bel;
    };
    BaseElement.prototype.prepend = function (belOrElOrType, initSet) {
        if (belOrElOrType === void 0) { belOrElOrType = "div"; }
        if (initSet === void 0) { initSet = {}; }
        var bel = this.append(belOrElOrType, initSet);
        this.el.insertBefore(bel.el, this.el.firstElementChild);
        return bel;
    };
    BaseElement.prototype.prependTo = function (parentEl) {
        parentEl.insertBefore(this.el, parentEl.firstElementChild);
    };
    BaseElement.prototype.appendTo = function (parentEl) {
        parentEl.appendChild(this.el);
    };
    BaseElement.prototype.remove = function () {
        BaseElement.remove(this.el);
    };
    BaseElement.prototype.find = function (selector) {
        return BaseElement.find(selector, this.el);
    };
    BaseElement.prototype.findAll = function (selector) {
        return BaseElement.findAll(selector, this.el);
    };
    BaseElement.prototype.startTick = function (priority) {
        if (priority === void 0) { priority = null; }
        if (this.isTicking)
            this.stopTick();
        this.isTicking = true;
        TweenMax.ticker.addEventListener("tick", this.innerTick, this, false, priority);
    };
    BaseElement.prototype.stopTick = function () {
        this.isTicking = false;
        TweenMax.ticker.removeEventListener("tick", this.innerTick);
    };
    BaseElement.prototype.innerTick = function () {
        if (!this.isTicking)
            return;
        this.tick();
    };
    BaseElement.prototype.tick = function () {
    };
    BaseElement.setAbs = function (el, left, top) {
        if (left === void 0) { left = 0; }
        if (top === void 0) { top = 0; }
        el.style.position = "absolute";
        el.style.left = left + "px";
        el.style.top = top + "px";
    };
    BaseElement.getPagePos = function (el) {
        var bounds = el.getBoundingClientRect();
        return new Vector_1["default"](bounds.left, bounds.top);
    };
    BaseElement.getPageCenter = function (el) {
        var bounds = el.getBoundingClientRect();
        var width = bounds.right - bounds.left;
        var height = bounds.bottom - bounds.top;
        return new Vector_1["default"](bounds.left + width / 2, bounds.top + height / 2);
    };
    BaseElement.insertBefore = function (newEl, refEl) {
        refEl.parentElement.insertBefore(newEl, refEl);
    };
    BaseElement.getGSTransform = function (el, forceGS) {
        if (forceGS === void 0) { forceGS = true; }
        return new GSTransform(CSSPlugin["_internals"].getTransform(el, null, true, false));
    };
    BaseElement.remove = function (el) {
        el.parentElement.removeChild(el);
    };
    BaseElement.find = function (selector, rootEl) {
        if (rootEl === void 0) { rootEl = document; }
        return rootEl.querySelector(selector);
    };
    BaseElement.findAll = function (selector, rootEl) {
        if (rootEl === void 0) { rootEl = document; }
        var ar = [];
        var nodes = rootEl.querySelectorAll(selector);
        for (var i = 0; i < nodes.length; i++) {
            ar.push(nodes[i]);
        }
        return ar;
    };
    return BaseElement;
}());
exports["default"] = BaseElement;
var BaseElementOfType = (function (_super) {
    __extends(BaseElementOfType, _super);
    function BaseElementOfType() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return BaseElementOfType;
}(BaseElement));
exports.BaseElementOfType = BaseElementOfType;

},{"./math/Vector":3}],2:[function(require,module,exports){
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
exports.__esModule = true;
var BaseElement_1 = require("./BaseElement");
var LayerRoot = (function (_super) {
    __extends(LayerRoot, _super);
    function LayerRoot(id, layerInfo) {
        if (layerInfo === void 0) { layerInfo = null; }
        var _this = _super.call(this, "div") || this;
        _this.basename = "*";
        _this.layers = {};
        _this.customDir = "";
        _this.id = id;
        _this.el.className = "char " + _this.id;
        _this.id = id;
        _this.animDelay = Math.random() * -10;
        _this.tl = new TimelineLite();
        if (layerInfo) {
            _this.addLayersFromInfo(layerInfo);
        }
        return _this;
    }
    LayerRoot.prototype.createTL = function () {
        return this.tl;
    };
    LayerRoot.prototype.wrapLayer = function (layerToWrapID, newLayerID) {
        if (!newLayerID)
            newLayerID = layerToWrapID + "-wrapper";
        var l = this.layers;
        var toWrapEl = l[layerToWrapID];
        var left = toWrapEl.style.left;
        var top = toWrapEl.style.top;
        toWrapEl.style.left = "0";
        toWrapEl.style.top = "0";
        var newEl = document.createElement("div");
        this.layers[newLayerID] = newEl;
        newEl.className = newLayerID + ' layer layer-group';
        newEl.style.position = "absolute";
        newEl.style.left = left;
        newEl.style.top = top;
        toWrapEl.parentElement.insertBefore(newEl, toWrapEl);
        newEl.appendChild(toWrapEl);
        return newEl;
    };
    LayerRoot.prototype.dupeLayer = function (sourceID_a, newID_a, insertBeforeID_a) {
        if (insertBeforeID_a === void 0) { insertBeforeID_a = ""; }
        var sourceEl = this.layers[sourceID_a];
        var newEl = sourceEl.cloneNode();
        newEl.classList.remove(sourceID_a);
        newEl.classList.add(newID_a);
        this.layers[newID_a] = newEl;
        if (insertBeforeID_a) {
            var insertBeforeEl = this.layers[insertBeforeID_a];
            insertBeforeEl.parentElement.insertBefore(newEl, insertBeforeEl);
        }
        else {
            sourceEl.parentElement.insertBefore(newEl, sourceEl.parentElement.firstElementChild);
        }
        return newEl;
    };
    LayerRoot.prototype.dupeGroup = function (sourceID_a, search_a, replace_a, insertBeforeID_a) {
        if (insertBeforeID_a === void 0) { insertBeforeID_a = ""; }
        var sourceEl = this.layers[sourceID_a];
        var newEl = sourceEl.cloneNode(true);
        var raw = newEl.querySelectorAll(".layer");
        var layers = [];
        for (var i = 0; i < raw.length; i++)
            layers[i] = raw[i];
        layers.push(newEl);
        for (var i = 0; i < layers.length; i++) {
            var layer = layers[i];
            var newID = layer.classList[0];
            layer.classList.remove(newID);
            newID = newID.replace(search_a, replace_a);
            layer.classList.add(newID);
            this.layers[newID] = layer;
        }
        if (insertBeforeID_a) {
            var insertBeforeEl = this.layers[insertBeforeID_a];
            insertBeforeEl.parentElement.insertBefore(newEl, insertBeforeEl);
        }
        else {
            sourceEl.parentElement.insertBefore(newEl, sourceEl.parentElement.firstElementChild);
        }
        return newEl;
    };
    LayerRoot.prototype.addLayer = function (layerInfo, parentEl, offsetX, offsetY) {
        if (parentEl === void 0) { parentEl = null; }
        if (offsetX === void 0) { offsetX = 0; }
        if (offsetY === void 0) { offsetY = 0; }
        if (!parentEl)
            parentEl = this.el;
        var el = document.createElement("div");
        el["info"] = layerInfo;
        el.className = layerInfo.id + ' layer';
        var isGroup = (layerInfo.layers != null);
        var isPoint = layerInfo.id.match(/\-point$/);
        var isPlaceholder = layerInfo.id.match(/\-placeholder/);
        if (isPoint) {
            el.className += " point debug debug-point";
        }
        if (isPlaceholder) {
            el.className += " placeholder";
        }
        var left = layerInfo.left;
        var top = layerInfo.top;
        var originX = layerInfo.originX;
        var originY = layerInfo.originY;
        left -= offsetX;
        top -= offsetY;
        originX -= offsetX;
        originY -= offsetY;
        var s = el.style;
        s.position = "absolute";
        s.left = originX + "px";
        s.top = originY + "px";
        if (!isGroup && !isPoint) {
            var marginLeft = left - originX;
            var marginTop = top - originY;
            s.marginLeft = marginLeft + "px";
            s.marginTop = marginTop + "px";
            s.width = layerInfo.width + "px";
            s.height = layerInfo.height + "px";
            if (!isPlaceholder) {
                var imgUrl = layerInfo.imgUrl || this.basename.replace("*", layerInfo.id) + '.png';
                imgUrl = this.customDir + imgUrl;
                s.backgroundImage = "url(" + imgUrl + ")";
                s.backgroundSize = "100% 100%";
            }
            TweenMax.set(el, {
                transformOrigin: -marginLeft + "px " + -marginTop + "px"
            });
        }
        else {
            TweenMax.set(el, {
                transformOrigin: '0 0'
            });
        }
        if (isGroup) {
            el.className += " layer-group";
            this.addLayers(layerInfo.layers, el, offsetX + originX, offsetY + originY);
        }
        else {
            el.className += " layer-flat";
        }
        this.layers[layerInfo.id] = el;
        parentEl.insertBefore(el, parentEl.firstChild);
        return el;
    };
    LayerRoot.prototype.addLayersFromInfo = function (layerInfo) {
        var settings = layerInfo.settings || {};
        if (settings.basename) {
            this.basename = settings.basename;
        }
        this.addLayers(layerInfo.layers, null, layerInfo.originX || 0, layerInfo.originY || 0);
    };
    LayerRoot.prototype.addLayers = function (layers, parentEl, offsetX, offsetY) {
        if (parentEl === void 0) { parentEl = null; }
        if (offsetX === void 0) { offsetX = 0; }
        if (offsetY === void 0) { offsetY = 0; }
        for (var i = 0; i < layers.length; i++) {
            var layerInfo = layers[i];
            this.addLayer(layerInfo, parentEl, offsetX, offsetY);
        }
    };
    return LayerRoot;
}(BaseElement_1["default"]));
exports["default"] = LayerRoot;

},{"./BaseElement":1}],3:[function(require,module,exports){
"use strict";
exports.__esModule = true;
var RAD_TO_DEGREE = 180 / Math.PI;
var DEGREE_TO_RAD = Math.PI / 180;
var Vector = (function () {
    function Vector(x, y) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        this.x = 0;
        this.y = 0;
        this.x = x;
        this.y = y;
    }
    Vector.prototype.scale = function (val) {
        this.x *= val;
        this.y *= val;
    };
    Vector.prototype.rotateRads = function (val) {
        var sin = Math.sin(val);
        var cos = Math.cos(val);
        var x = this.x;
        var y = this.y;
        this.x = x * cos - y * sin;
        this.y = x * sin + y * cos;
    };
    Vector.prototype.rotateDegs = function (val) {
        this.rotateRads(val * DEGREE_TO_RAD);
    };
    Vector.prototype.add = function (vec) {
        this.x += vec.x;
        this.y += vec.y;
    };
    Vector.prototype.sub = function (vec) {
        this.x -= vec.x;
        this.y -= vec.y;
    };
    Vector.prototype.mul = function (vec) {
        this.x *= vec.x;
        this.y *= vec.y;
    };
    Vector.prototype.div = function (vec) {
        this.x /= vec.x;
        this.y /= vec.y;
    };
    Vector.prototype.translate = function (x, y) {
        this.x += x;
        this.y += y;
    };
    Vector.prototype.length = function () {
        return Math.sqrt(this.x * this.x + this.y * this.y);
    };
    Vector.prototype.setLength = function (val) {
        if (val == 0) {
            this.x = 0;
            this.y = 0;
            return;
        }
        var len = this.length();
        if (len == 0) {
            this.x = val;
            return;
        }
        var scale = val / len;
        this.x *= scale;
        this.y *= scale;
    };
    Vector.prototype.angleRads = function () {
        return Math.atan2(this.y, this.x);
    };
    Vector.prototype.setAngleRads = function (rads) {
        var len = this.length();
        this.x = Math.cos(rads) * len;
        this.y = Math.sin(rads) * len;
    };
    Vector.prototype.angleDegs = function () {
        return this.angleRads() * RAD_TO_DEGREE;
    };
    Vector.prototype.setAngleDegs = function (degs) {
        this.setAngleRads(degs * DEGREE_TO_RAD);
    };
    Vector.prototype.clone = function () {
        return new Vector(this.x, this.y);
    };
    Vector.prototype.diff = function (b) {
        return Vector.diff(this, b);
    };
    Vector.prototype.toString = function () {
        return this.x + "," + this.y;
    };
    Vector.diff = function (a, b) {
        var vec = new Vector();
        vec.x = a.x - b.x;
        vec.y = a.y - b.y;
        return vec;
    };
    Vector.lerp = function (a, b, t) {
        var vec = new Vector(0, 0);
        vec.x = a.x + (b.x - a.x) * t;
        vec.y = a.y + (b.y - a.y) * t;
        return vec;
    };
    Vector.from = function (vectorLike) {
        return new Vector(vectorLike.x, vectorLike.y);
    };
    Vector.ZERO = new Vector(0, 0);
    Vector.ONE = new Vector(1, 1);
    Vector.LEFT = new Vector(-1, 0);
    Vector.RIGHT = new Vector(1, 0);
    Vector.UP = new Vector(0, -1);
    Vector.DOWN = new Vector(0, 1);
    return Vector;
}());
exports["default"] = Vector;

},{}],4:[function(require,module,exports){
"use strict";
exports.__esModule = true;
var BaseElement_1 = require("./InkLib/BaseElement");
var LayerRoot_1 = require("./InkLib/LayerRoot");
var INK = {
    BaseElement: BaseElement_1["default"],
    LayerRoot: LayerRoot_1["default"]
};
window["INK"] = INK;

},{"./InkLib/BaseElement":1,"./InkLib/LayerRoot":2}]},{},[4])